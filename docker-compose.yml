services:
  gestionCoupon:
    build: ./Coupon
    image: arbiferchichi/coupon
    container_name: coupon-service
    ports:
      - "8081:8081"
    environment:
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka-server:8761/eureka/
    depends_on:
      - eureka-server

  

  mysqldb:
    image: mysql:5.7
    restart: unless-stopped
    env_file: ./livraison/.env
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=root
    ports:
      - 3306:3306
    volumes:
      - db:/var/lib/mysql


  livraison:
    image: arbiferchichi/livraison
    container_name: livraison-service

    depends_on:
      - mysqldb
      - eureka-server
      
    build: ./livraison
    restart: on-failure
    ports:
      - 8089:8089
    environment:
      SPRING_APPLICATION_JSON: '{
        "spring.datasource.url"  : "jdbc:mysql://mysqldb:3306/livraison?createDatabaseIfNotExist=true&useSSL=false",
        "spring.datasource.username" : "root",
        "spring.datasource.password" : "root",
        "spring.jpa.properties.hibernate.dialect" : "org.hibernate.dialect.MySQLDialect",
        "spring.jpa.hibernate.ddl-auto" : "update"
      }'


    volumes:
      - .m2:/root/.m2
    stdin_open: true
    tty: true

  product:
    image: arbiferchichi/product
    container_name: produit

    depends_on:
      - mysqldb
      - eureka-server
      
    build: ./Produits
    restart: on-failure
    ports:
      - 8078:8078
    environment:
      SPRING_APPLICATION_JSON: '{
        "spring.datasource.url"  : "jdbc:mysql://mysqldb:3306/product?createDatabaseIfNotExist=true&useSSL=false",
        "spring.datasource.username" : "root",
        "spring.datasource.password" : "root",
        "spring.jpa.properties.hibernate.dialect" : "org.hibernate.dialect.MySQLDialect",
        "spring.jpa.hibernate.ddl-auto" : "update"
      }'


    volumes:
      - .m2:/root/.m2
    stdin_open: true
    tty: true

  reclamation:
    image: anisfarjallah/reclamation
    container_name: reclamation
  
    depends_on:
      - mysqldb
      - eureka-server
        
    build: ./BackSpring-MicroS
    restart: on-failure
    ports:
      - 8075:8075
    environment:
      SPRING_APPLICATION_JSON: '{
          "spring.datasource.url"  : "jdbc:mysql://mysqldb:3306/recbase?createDatabaseIfNotExist=true&useSSL=false",
          "spring.datasource.username" : "root",
          "spring.datasource.password" : "root",
          "spring.jpa.properties.hibernate.dialect" : "org.hibernate.dialect.MySQLDialect",
          "spring.jpa.hibernate.ddl-auto" : "update"
        }'
  
  
    volumes:
      - .m2:/root/.m2
    stdin_open: true
    tty: true

  eureka-server:
    build: ./eurukaServer
    image: arbiferchichi/eureka
    container_name: eureka
    ports:
      - "8761:8761"
    environment:
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka-server:8761/eureka/

  api-gateway:
    build: ./api-Gatway
    image: arbiferchichi/apigateway
    container_name: apigateway
    ports:
      - "8007:8007"
    environment:
   

      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka-server:8761/eureka/
    depends_on:
      - eureka-server
      - livraison
  

  angular:
    build: ./light-bootstrap-dashboard-angular2-master  # Path to your Angular app's Dockerfile
    image: arbiferchichi/angular-app  # You can change this to a more descriptive image name
    container_name: angular-service
    ports:
      - "4200:4200"  # Map the container's internal port 80 to host port 4200 (default Angular port)
    environment:

      - NODE_ENV=production  # Set the environment to production or any other variables you need
      - API_URL=http://api-gateway:8007  # Adjust to point to your API gateway or backend service
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka/  # Eureka server URL
    depends_on:
      - eureka-server  # Ensure eureka-server is available before starting the Angular app
      - api-gateway 
      - livraison
     # Map the Angular build directory to Nginx server
    restart: unless-stopped  # You can change restart policy if necessary
    stdin_open: true
    tty: true 



volumes:
  db:

 